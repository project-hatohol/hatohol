#!/bin/sh

set -e

prefix=@prefix@
exec_prefix=@exec_prefix@

PID_FILE_DIR="@localstatedir@/run/hatohol"
PLUGIN_DIR="@libexecdir@/hatohol/hap2"
PLUGIN_PATH=""
PID_FILE="${PID_FILE_DIR}/hatohol-arm-plugin-${HAPI_MONITORING_SERVER_ID}"
HAP2_LOG_CONF="@sysconfdir@/@PACKAGE_NAME@/hap2-logging.conf"
PLUGIN_OPTIONS=""

prepare_plugin_options() {
    if test -n "$HAPI_AMQP_HOST"; then
        PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --amqp-broker=$HAPI_AMQP_HOST"
    fi

    if test -n "$HAPI_AMQP_PORT"; then
        PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --amqp-port=$HAPI_AMQP_PORT"
    fi

    if test -n "$HAPI_AMQP_USER"; then
        PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --amqp-user=$HAPI_AMQP_USER"
    fi

    if test -n "$HAPI_AMQP_QUEUE"; then
        PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --amqp-queue=$HAPI_AMQP_QUEUE"
    fi

    if test -n "$HAPI_AMQP_VHOST"; then
        PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --amqp-vhost=$HAPI_AMQP_VHOST"
    fi

    PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --log-conf=$HAP2_LOG_CONF"
    PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --plugin-path=$PLUGIN_PATH"
    PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --server-id=$HAPI_MONITORING_SERVER_ID"
    PLUGIN_OPTIONS="${PLUGIN_OPTIONS} --pid-file-dir=$PID_FILE_DIR"
}

check_pid_file() {
    if test -f "$PID_FILE"; then
        PID=`tail -n +1 ${PID_FILE}`
        ALIVE=`ps $PID | grep $PLUGIN_PATH | grep -v grep | wc -l`
        if test $ALIVE -ne 0; then
            echo "The plugin process already exists!"
            stop_plugin
        else
            rm -f ${PID_FILE}
        fi
    fi
}

start_plugin() {
    echo "Start $PLUGIN_PATH ..."
    echo "Server ID: $HAPI_MONITORING_SERVER_ID"

    prepare_plugin_options
    check_pid_file

    ${PLUGIN_DIR}/hatohol/hap2_starter.py $PLUGIN_OPTIONS &
    RESULT=$?

    if test $RESULT -eq 0; then
        echo "Succeeded to execute hap2_starter.py"
    else
        echo "Failed to execute hap2_starter.py"
    fi
}

stop_plugin() {
    echo "Stop $PLUGIN_PATH ..."
    echo "Server ID: $HAPI_MONITORING_SERVER_ID"

    if test -f "$PID_FILE"; then
        STARTER_PID=`head -n +1 ${PID_FILE}`
        echo "STARTER_PID: $STARTER_PID"
        if test -n $STARTER_PID; then
            kill $STARTER_PID
        fi
        rm -f ${PID_FILE}
        echo "Succeeded to stop $PLUGIN_PATH"
    else
        echo "The PID file doesn't exists: $PID_FILE"
    fi
}

check_variables() {
    if test -z "$PLUGIN_PATH"; then
        echo "PLUGIN_PATH isn't set!"
        exit 1
    fi

    if test -z "$HAPI_MONITORING_SERVER_ID"; then
        echo "HAPI_MONITORING_SERVER_ID isn't set!"
        exit 1
    fi
}

run() {
    check_variables

    case "$1" in
        start)
            start_plugin
            ;;
        stop)
            stop_plugin
            ;;
        *)
            echo "Usage: $0 {start|stop}"
            exit 1
            ;;
    esac

    exit 0
}
