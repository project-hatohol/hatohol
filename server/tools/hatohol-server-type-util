#!/usr/bin/env python
"""
  Copyright (C) 2014-2015 Project Hatohol

  This file is part of Hatohol.

  Hatohol is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License, version 3
  as published by the Free Software Foundation.

  Hatohol is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with Hatohol. If not, see
  <http://www.gnu.org/licenses/>.
"""
import hatohol
import json
import argparse
from sets import Set


class ParamGenerator:
    def get_plugin_path(self):
        return ''

    def get_zabbix_params(self):
        obj = []
        obj.append({'id': 'nickname',
                    'label': 'Nickname'})
        obj.append({'id': 'hostName',
                    'label': 'Host name'})
        obj.append({'id': 'ipAddress',
                    'label': 'IP address'})
        obj.append({'id': 'port',
                    'label': 'Port',
                    'default': '80'})
        obj.append({'id': 'userName',
                    'label': 'User name'})
        obj.append({'id': 'password',
                    'label': 'Password',
                    'inputStyle': 'password'})
        obj.append({'id': 'pollingInterval',
                    'label': 'Polling interval (sec)',
                    'default': '30'})
        obj.append({'id': 'retryInterval',
                    'label': 'Retry interval (sec)',
                    'default': '10'})
        return obj

    def get_hapi_params(self):
        obj = []
        obj.append({'id': 'passiveMode',
                    'label': 'Passive mode',
                    'inputStyle': 'checkBox'})
        obj.append({'id': 'brokerUrl',
                    'label': 'Broker URL',
                    'allowEmpty': True,
                    'hint': '(empty: Default)'})
        obj.append({'id': 'staticQueueAddress',
                    'label': 'Static queue address',
                    'allowEmpty': True,
                    'hint': '(empty: Default)'})
        return obj

    def get_sql_file_type_name(self):
        return ''

    def get_sql_version_number(self):
        return 1

    def get_uuid(self):
        return ""


class ZabbixParamGenerator(ParamGenerator):
    def get_server_type(self):
        return hatohol.MONITORING_SYSTEM_ZABBIX

    def get_server_type_name(self):
        return 'Zabbix'

    def get_parameters(self):
        return self.get_zabbix_params()

    def get_sql_file_type_name(self):
        return 'zabbix'

    def get_sql_version(self):
        return self.get_sql_version_number()


class NagiosParamGenerator(ParamGenerator):
    def get_server_type(self):
        return hatohol.MONITORING_SYSTEM_NAGIOS

    def get_server_type_name(self):
        return 'Nagios'

    def get_parameters(self):
        obj = []
        obj.append({'id': 'nickname',
                    'label': 'Nickname'})
        obj.append({'id': 'hostName',
                    'label': 'Host name'})
        obj.append({'id': 'ipAddress',
                    'label': 'IP address'})
        obj.append({'id': 'port',
                    'label': 'Port',
                    'default': '0'})
        obj.append({'id': 'dbName',
                    'label': 'DB name'})
        obj.append({'id': 'userName',
                    'label': 'User name'})
        obj.append({'id': 'password',
                    'label': 'Password',
                    'inputStyle': 'password'})
        obj.append({'id': 'pollingInterval',
                    'label': 'Polling interval (sec)',
                    'default': '30'})
        obj.append({'label': 'Retry interval (sec)',
                    'id': 'retryInterval',
                    'default': '10'})
        obj.append({'id': 'baseURL',
                    'label': 'Web UI URL',
                    'allowEmpty': True,
                    'hint': '(empty: Default)'})
        return obj

    def get_sql_file_type_name(self):
        return 'nagios'

    def get_sql_version(self):
        return self.get_sql_version_number()


class HapiZabbixParamGenerator(ParamGenerator):
    def get_server_type(self):
        return hatohol.MONITORING_SYSTEM_HAPI_ZABBIX

    def get_server_type_name(self):
        return 'Zabbix (HAPI) [experimental]'

    def get_parameters(self):
        obj = self.get_zabbix_params()
        obj.extend(self.get_hapi_params())
        return obj

    def get_plugin_path(self):
        return 'hatohol-arm-plugin-zabbix'

    def get_sql_file_type_name(self):
        return 'hapi-zabbix'

    def get_sql_version(self):
        return self.get_sql_version_number()


class HapiJSONParamGenerator(ParamGenerator):
    def get_server_type(self):
        return hatohol.MONITORING_SYSTEM_HAPI_JSON

    def get_server_type_name(self):
        return 'JSON (HAPI) [experimental]'

    def get_parameters(self):
        obj = []
        obj.append({'id': 'nickname',
                    'label': 'Nickname'})
        obj.append({'id': 'brokerUrl',
                    'label': 'Broker URL',
                    'allowEmpty': True,
                    'hint': '(empty: Default)'})
        obj.append({'id': 'staticQueueAddress',
                    'label': 'Static queue address',
                    'allowEmpty': True,
                    'hint': '(empty: Default)'})
        obj.append({'id': 'tlsCertificatePath',
                    'label': 'TLS client certificate path',
                    'allowEmpty': True})
        obj.append({'id': 'tlsKeyPath',
                    'label': 'TLS client key path',
                    'allowEmpty': True})
        obj.append({'id': 'tlsCACertificatePath',
                    'label': 'TLS CA certificate path',
                    'allowEmpty': True})
        obj.append({'id': 'tlsEnableVerify',
                    'label': 'TLS: Enable verify',
                    'inputStyle': 'checkBox',
                    'allowEmpty': True})
        return obj

    def get_sql_file_type_name(self):
        return 'hapi-json'

    def get_sql_version(self):
        return self.get_sql_version_number()


class HapiCeilometerGenerator(ParamGenerator):
    def get_server_type(self):
        return hatohol.MONITORING_SYSTEM_HAPI_CEILOMETER

    def get_server_type_name(self):
        return 'Ceilometer'

    def get_parameters(self):
        obj = []
        obj.append({'id': 'nickname',
                    'label': 'Nickname'})
        obj.append({'id': 'hostName',
                    'label': 'Keystone URL',
                    'hint': 'Example: http://controller:5000/v2.0'})
        obj.append({'id': 'ipAddress',
                    'label': 'IP address',
                    'hidden': True,
                    'default': '127.0.0.1'})
        obj.append({'id': 'port',
                    'label': 'Port',
                    'hidden': True,
                    'default': '0'})
        obj.append({'id': 'dbName',
                    'label': 'Tenant name'})
        obj.append({'id': 'userName',
                    'label': 'User name'})
        obj.append({'id': 'password',
                    'label': 'Password',
                    'inputStyle': 'password'})
        obj.append({'id': 'pollingInterval',
                    'label': 'Polling interval (sec)',
                    'default': '30'})
        obj.append({'id': 'retryInterval',
                    'label': 'Retry interval (sec)',
                    'default': '10'})
        obj.extend(self.get_hapi_params())
        return obj

    def get_plugin_path(self):
        return 'hatohol-arm-plugin-ceilometer'

    def get_sql_file_type_name(self):
        return 'ceilometer'

    def get_sql_version(self):
        return self.get_sql_version_number()


def generate_one_type(table_name, server_type, server_label, parameters,
                      plugin_path, sql_version, file_identifier, uuid):
    PLUGIN_ENABLED = 1
    line = 'INSERT INTO ' + table_name
    line += ' (type, name, parameters, plugin_path, plugin_sql_version,' \
            ' plugin_enabled, uuid) VALUES ('
    line += '%d, \'%s\', \'%s\', \'%s\', %d, %d, \'%s\') ' % \
        (server_type, server_label, parameters, plugin_path, sql_version,
         PLUGIN_ENABLED, uuid)
    line += 'ON DUPLICATE KEY UPDATE'
    line += ' name=\'%s\', parameters=\'%s\', plugin_path=\'%s\',' \
            ' plugin_sql_version=\'%d\', plugin_enabled=\'%d\',' \
            ' uuid=\'%s\';' % \
        (server_label, parameters, plugin_path, sql_version, PLUGIN_ENABLED,
         uuid)
    sql = open('server-type-' + file_identifier + '.sql', 'w')
    sql.write(line)
    sql.close()


def generate_mysql(generators):
    TABLE_NAME = 'server_types'
    for gen in generators:
        generate_one_type(TABLE_NAME, gen.get_server_type(),
                          gen.get_server_type_name(),
                          json.dumps(gen.get_parameters()),
                          gen.get_plugin_path(),
                          gen.get_sql_version(),
                          gen.get_sql_file_type_name(),
                          gen.get_uuid())


def generate_label_gettext(generators):
    labels = Set()
    for gen in generators:
        for obj in gen.get_parameters():
            labels.add(obj['label'])
    for label in labels:
        print 'gettext("' + label + '")'


def main():
    parser = argparse.ArgumentParser(
        description="Hatohol Server Types Utility.")
    parser.add_argument('command', choices=['mysql', 'label-gettext'])
    args = parser.parse_args()

    generators = (
        ZabbixParamGenerator(),
        NagiosParamGenerator(),
        HapiZabbixParamGenerator(),
        HapiJSONParamGenerator(),
        HapiCeilometerGenerator(),
    )

    command_handlers = {
        'mysql': generate_mysql,
        'label-gettext': generate_label_gettext,
    }[args.command](generators)


if __name__ == '__main__':
    main()
