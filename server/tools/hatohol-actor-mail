#!/usr/bin/env python
"""
  Copyright (C) 2013 Project Hatohol

  This file is part of Hatohol.

  Hatohol is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 2 of the License, or
  (at your option) any later version.

  Hatohol is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Hatohol. If not, see <http://www.gnu.org/licenses/>.
"""
import sys
import smtplib
import time
import hatohol
from optparse import OptionParser
from optparse import OptionGroup
from email.MIMEText import MIMEText
from email.Utils import formatdate

DEFAULT_SMTP_SERVER = "localhost"
DEFAULT_FROM_ADDR = "hatohol@localhost"

EVENT_TYPE_NAMES = {
  hatohol.EVENT_TYPE_GOOD:"GOOD",
  hatohol.EVENT_TYPE_BAD:"BAD"
}

TRIGGER_STATUS_NAMES = {
  hatohol.TRIGGER_STATUS_OK:"OK",
  hatohol.TRIGGER_STATUS_PROBLEM:"PROBLEM"
}

TRIGGER_SEVERITY_NAMES = {
  hatohol.TRIGGER_SEVERITY_INFO:"INFO",
  hatohol.TRIGGER_SEVERITY_WARNING:"WARNING",
  hatohol.TRIGGER_SEVERITY_ERROR:"ERROR",
  hatohol.TRIGGER_SEVERITY_CRITICAL:"CRITICAL",
  hatohol.TRIGGER_SEVERITY_EMERGENCY:"EMERGENCY"
}

def main():
  parser = OptionParser(usage="%prog [options] to_address")
  parser.add_option("--smtp-server", type="string", dest="smtp_server", metavar="HOST",
                    help="SMTP Server HOST", default=DEFAULT_SMTP_SERVER)
  group = OptionGroup(parser, "HATOHOL ACTION")
  group.add_option("--action", type="int", dest="action_id", metavar="ID",
                   help="action def. ID")
  group.add_option("--server", type="int", dest="server_id", metavar="ID",
                   help="server ID")
  group.add_option("--host", type="int", dest="host_id", metavar="ID",
                   help="host ID")
  group.add_option("--timestamp", action="callback", type="string", callback=parse_timestamp, metavar="TIMESTAMP",
                   help="TIMESTAMP as unixtime.nanosec")
  group.add_option("--event-type", action="callback", type="int", callback=parse_event_type, metavar="TYPE",
                   help="type (0: GOOD, 1: BAD)")
  group.add_option("--event", type="int", dest="event_id", metavar="ID",
                   help="event ID")
  group.add_option("--trigger", type="int", dest="trigger_id", default=-1, metavar="ID",
                   help="trigger ID")
  group.add_option("--trigger-status", action="callback", type="int", callback=parse_trigger_status, metavar="STATUS",
                   help="trigger status (0: OK, 1: PROBLEM)")
  group.add_option("--trigger-severity", action="callback", type="int", callback=parse_trigger_severity, metavar="SEVERITY",
                   help="trigger severity (0: INFO, 1: WARNING, 2: ERROR, 3: CRITICAL, 4: EMERGENCY)")
  parser.add_option_group(group)
  (options, args) = parser.parse_args()

  if len(args) == 0:
    parser.error("Not found: To address")

  to_addr = args.pop()

  if len(args) != 0:
    parser.error("Too many argumets")

  subject = make_subject(options)
  body = make_body(options)

  send_mail(options.smtp_server,
            DEFAULT_FROM_ADDR,
            to_addr,
            subject,
            body)

def warn(msg):
  print "WARNING: " + msg

def make_subject(options):
  subject = "[%s] EventID: %d, Trigger ID: %d" % (options.trigger_severity_label, options.event_id, options.trigger_id)
  return subject

def make_body(options):
  body = ""
  body += "action: %d\n" % options.action_id
  body += "server: %d\n" % options.server_id
  body += "host: %d\n" % options.host_id
  
  time_local_label = time.asctime(time.localtime(options.time_sec));
  body += "time: %d.%d (%s)\n" % (options.time_sec, options.time_nsec, time_local_label)

  body += "event type: %d (%s)\n" % (options.event_type, options.event_type_label)
  body += "event: %d\n" % options.event_id
  body += "trigger: %s\n" % options.trigger_id
  body += "trigger status: %d (%s)\n" % (options.trigger_status, options.trigger_status_label)
  body += "trigger severity: %d (%s)\n" % (options.trigger_severity, options.trigger_severity_label)

  return body

def send_mail(smtp_server, from_addr, to_addr, subject, body):
  msg = MIMEText(body)
  msg["Subject"] = subject
  msg["From"] = from_addr
  msg["To"] = to_addr
  msg["Date"] = formatdate()

  smtp =smtplib.SMTP(smtp_server)
  smtp.sendmail(from_addr, to_addr, msg.as_string())
  smtp.close()

def parse_timestamp(option, opt, value, parser):
  (parser.values.time_sec, parser.values.time_nsec) = value.split(".")

def parse_event_type(option, opt, value, parser):
  event_type = int(value)
  parser.values.event_type = event_type
  if event_type in EVENT_TYPE_NAMES:
    parser.values.event_type_label = EVENT_TYPE_NAMES[event_type]
  else:
    warn("Unknown event type %d" % event_type)
    parser.values.event_type_label = "N/A"

def parse_trigger_status(option, opt, value, parser):
  trigger_status = int(value)
  parser.values.trigger_status = trigger_status
  if trigger_status in TRIGGER_STATUS_NAMES:
    parser.values.trigger_status_label = TRIGGER_STATUS_NAMES[trigger_status]
  else:
    warn("Unknown trigger status %d" % trigger_status)
    parser.values.trigger_status_label = "N/A"

def parse_trigger_severity(option, opt, value, parser):
  trigger_severity = int(value)
  parser.values.trigger_severity = trigger_severity
  if trigger_severity in TRIGGER_SEVERITY_NAMES:
    parser.values.trigger_severity_label = TRIGGER_SEVERITY_NAMES[trigger_severity]
  else:
    warn("Unknow trigger severity %d" % trigger_severity)
    parser.values.trigger_severity_label = "N/A"

if __name__ == '__main__':
  main()
