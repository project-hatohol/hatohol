#!/usr/bin/env python
"""
  Copyright (C) 2014-2015 Project Hatohol

  This file is part of Hatohol.

  Hatohol is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License, version 3
  as published by the Free Software Foundation.

  Hatohol is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with Hatohol. If not, see
  <http://www.gnu.org/licenses/>.
"""
import sys
import os
import argparse
import MySQLdb
from ctypes import *
import ConfigParser

_use_hapi1_plugins = '@with_qpid@'

sql_file_list = [
    {'table_name': 'users',
     'file_name': 'init-user.sql',
     'target': 'users'},
    {'table_name': 'server_types',
     'file_name': 'server-type-zabbix.sql',
     'target': 'zabbix'},
    {'table_name': 'server_types',
     'file_name': 'server-type-nagios.sql',
     'target': 'nagios'},
]

if _use_hapi1_plugins == 'yes':
    sql_file_list.extend([
    {'table_name': 'server_types',
     'file_name': 'server-type-hapi-zabbix.sql',
     'target': 'hapi-zabbix'},
    {'table_name': 'server_types',
     'file_name': 'server-type-hapi-json.sql',
     'target': 'hapi-json'},
    {'table_name': 'server_types',
     'file_name': 'server-type-ceilometer.sql',
     'target': 'ceilometer'},
    ])

sql_file_list.extend([
    {'table_name': 'server_types',
     'file_name': 'server-type-hap2-ceilometer.sql',
     'target': 'hapi2-ceilometer'},
    {'table_name': 'server_types',
     'file_name': 'server-type-hap2-fluentd.sql',
     'target': 'hapi2-fluentd'},
    {'table_name': 'server_types',
     'file_name': 'server-type-hap2-nagios-ndoutils.sql',
     'target': 'hapi2-nagios-ndoutils'},
    {'table_name': 'server_types',
     'file_name': 'server-type-hap2-nagios-livestatus.sql',
     'target': 'hapi2-nagios-livestatus'},
    {'table_name': 'server_types',
     'file_name': 'server-type-hap2-zabbix.sql',
     'target': 'hapi2-zabbix'},
    {'table_name': 'severity_ranks',
     'file_name': 'severity-ranks.sql',
     'target': 'severity-ranks'},
    {'table_name': 'custom_incident_statuses',
     'file_name': 'custom-incident-statuses.sql',
     'target': 'custom-incident-statuses'},
    {'table_name': 'incident_trackers',
     'file_name': 'incident-trackers.sql',
     'target': 'incident-trackers'},
    {'table_name': 'actions',
     'file_name': 'actions.sql',
     'target': 'actions'},
])

config_map = {
    'db_login_user': 'root',
    'db_login_password': '',
    'database': 'hatohol',
    'user': 'hatohol',
    'password': 'hatohol',
    'host': 'localhost',
    'port': 0
}


def get_default_conf():
    return '@expanded_sysconfdir@/hatohol/hatohol.conf'


def init_config_map():
    config_file = get_default_conf()
    if not os.access(config_file, os.R_OK):
        return

    config = ConfigParser.ConfigParser()
    config.read(config_file)
    data = (
        ('database', 'mysql', 'database'),
        ('user', 'mysql', 'user'),
        ('password','mysql', 'password'),
        ('host', 'mysql', 'host'),
        ('port', 'mysql', 'port'),
    )
    global config_map
    for key, section, option in data:
        if not config.has_option(section, option):
            continue
        config_map[key] = config.get(section, option)


def create_db_if_needed(cursor, args):
    cursor.execute('SHOW DATABASES')
    found = False
    for row in cursor.fetchall():
        if args.db_name in row:
            found = True
            break
    if found:
        print 'DB already exists: %s' % args.db_name
    else:
        if not args.skip_fix_privileges:
            cursor.execute(
                'GRANT ALL PRIVILEGES ON %s.* TO %s@\'%s\' IDENTIFIED BY \'%s\''
                % (args.db_name, args.hatohol_db_user,
                   args.hatohol_db_user_host,  args.hatohol_db_password))
        cursor.execute('CREATE DATABASE %s' % args.db_name)
        print 'Created DB: %s' % args.db_name
    cursor.execute('USE %s' % args.db_name)


def create_hatohol_tables(args):
    hatohol = cdll.LoadLibrary('libhatohol.so.0')
    ret = hatohol.createDBHatohol(c_char_p(args.db_name),
                                  c_char_p(args.db_user),
                                  c_char_p(args.db_password),
                                  c_char_p(args.host),
                                  c_int(args.port))
    if ret == -1:
        print 'Failed to create DBHatohol object'
        sys.exit(-1)


def has_upsert_in_sql(table_name):
    return table_name == 'server_types'


def prepare_updating_table_does_not_have_upsert(cursor, table_name):
    cursor.execute('DELETE FROM %s' % table_name)
    print 'Deleted all rows in table: %s' % table_name


def should_skip_updating_table(cursor, args, table_name, file_path):
    cursor.execute('SELECT COUNT(*) FROM %s;' % table_name)
    num_rows = cursor.fetchall()[0][0]
    if num_rows > 0 and not args.force:
        print 'The number of rows in table: %s ' \
              'is not zero (%d)' % (table_name, num_rows)
        print 'Skip loading data: %s' % file_path
        print 'If you want to drop the existing table ' \
              'and load data, use -f or --force option.'
        return True

    return False


def execute_sql_statements_from_file(cursor, path):
    with open(path, 'r') as sql_file:
        statement = ""
        for line in sql_file:
            statement += line.rstrip("\n")
            last_char = line.rstrip("\n\t ")[-1]
            completed = (last_char == ";")
            if not completed:
                continue
            cursor.execute(statement)
            statement = ""
    print 'Succeessfully loaded: %s' % path


def load_data_from_file(cursor, args, table_name, file_path):
    if not has_upsert_in_sql(table_name):
        should_skip = should_skip_updating_table(cursor, args,
                                                 table_name, file_path)
        if should_skip:
            return

        prepare_updating_table_does_not_have_upsert(cursor, table_name)

    execute_sql_statements_from_file(cursor, file_path)


def check_sql_file(args, sql_file_list):
    for sql_file in sql_file_list:
        path = sql_file['file_name']
        if not os.path.isfile(path):
            print 'Error: Not found: %s' % path
            print 'You can specifiy the SQL directory by --sql-dir option.'
            sys.exit(-1)


def add_sql_directory(args, sql_file_list):
    for sql_file in sql_file_list:
        sql_file['file_name'] = args.sql_dir + '/' + sql_file['file_name']


def get_default_conf_item(item_name):
    return config_map.get(item_name)


def start(args):

    add_sql_directory(args, sql_file_list)
    check_sql_file(args, sql_file_list)

    try:
        db = MySQLdb.connect(host=args.host,
                             user=args.db_user, passwd=args.db_password)
        cursor = db.cursor()
    except MySQLdb.Error as (errno, msg):
        print 'MySQL Error [%d]: %s' % (errno, msg)
        sys.exit(os.EX_DATAERR)

    create_db_if_needed(cursor, args)
    create_hatohol_tables(args)

    try:
        for sql_file in sql_file_list:
            if args.target and args.target != sql_file['target']:
                continue
            load_data_from_file(cursor, args,
                                sql_file['table_name'], sql_file['file_name'])
        db.commit()
    except:
        db.rollback()

    cursor.close()
    db.close()


def get_default_sql_dir():
    return os.path.dirname(__file__) + '/../share/hatohol/sql'


def get_target_list():
    target_list = []
    [target_list.append(elem['target']) for elem in sql_file_list]
    return target_list

if __name__ == '__main__':
    init_config_map()

    parser = argparse.ArgumentParser(description='Hatohol DB Initiator')
    parser.add_argument('--db-name', type=str,
                        default=get_default_conf_item('database'),
                        help='A database name to be initialized.')
    parser.add_argument('--db-user', type=str,
                        default=get_default_conf_item('db_login_user'),
                        help='A user to log in to the database server.')
    parser.add_argument('--db-password', type=str,
                        default=get_default_conf_item('db_login_password'),
                        help='A password to log in to the database server.')
    parser.add_argument('--host', type=str,
                        default=get_default_conf_item('host'),
                        help='A database server.')
    parser.add_argument('--port', type=int,
                        default=get_default_conf_item('port'),
                        help='A database port.')
    parser.add_argument('--sql-dir', type=str,
                        default=get_default_sql_dir(),
                        help='A directory that contains SQL files.')
    parser.add_argument('--hatohol-db-user', type=str,
                        default=get_default_conf_item('user'),
                        help='A user who is allowed to access the database.')
    parser.add_argument('--hatohol-db-password', type=str,
                        default=get_default_conf_item('password'),
                        help='A password that is used to access the database.')
    parser.add_argument('-s', '--skip-fix-privileges', action='store_true')
    parser.add_argument('--hatohol-db-user-host', type=str,
                        default='localhost')
    parser.add_argument('-f', '--force', action='store_true',
                        help='Delete existing data in a table before the initial data are inserted. '
                        'By default, this tool skips to insert data if the table is not empty.')
    parser.add_argument('-t', '--target', choices=get_target_list(),
                        help='Only the specified table is initialized.')
    args = parser.parse_args()

    start(args)
