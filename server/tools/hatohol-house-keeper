#!/usr/bin/env python
import sys
import os
import argparse
import MySQLdb
import time


def finish_if_require_option_is_fault(args):
    if args.date and args.number:
        print 'You can not set -d (--date) and -n (--number) option together.'
        sys.exit(os.EX_USAGE)
    if not args.date and not args.number and not args.stat:
        print 'You need to set -d (--date) or -n (--number) or --stat option.'
        sys.exit(os.EX_USAGE)
    if (args.date or args.number) and not args.table:
        print 'You need to set table name using --table option.'


def show_number_of(table_name, cursor):
    query = 'SELECT count(*) FROM %s' % table_name
    cursor.execute(query)
    row = cursor.fetchone()

    print '%s: %d' % (table_name, row[0])


def show_status(cursor):
    show_number_of('events', cursor)
    show_number_of('action_logs', cursor)
    sys.exit(os.EX_OK)


def return_unix_time(date):
    format = '%Y-%m-%d %H:%M:%S'
    date += ' 00:00:00'
    return int(time.mktime(time.strptime(date, format)))


def run_sql_query(db, cursor, query):
    try:
        cursor.execute(query)
        db.commit()
    except:
        db.rollback()


def delete_unnecessary_records_by_date(table_name, date, db, cursor):
    if 'events' in table_name:
        time_sec = return_unix_time(date)
        query = 'DELETE FROM events WHERE time_sec < %d' % time_sec
    elif 'action_logs' in table_name:
        query = 'DELETE FROM action_logs WHERE queuing_time < %s' % date
    else:
        print 'Table name is wrong!'
        return

    run_sql_query(db, cursor, query)


def delete_unncessary_records_by_number(table_name, number, db, cursor):
    if 'events' in table_name:
        query = 'DELETE FROM events ORDER BY time_sec ASC LIMIT %d' % number
    elif 'action_logs' in table_name:
        query = 'DELETE FROM action_logs ORDER BY queuing_time ASC LIMIT %d' % number
    else:
        print 'Table name is wrong!'
        return

    run_sql_query(db, cursor, query)


def start(args):
    try:
        db = MySQLdb.connect(host=args.db_host, db=args.db_name,
                             user=args.db_user, passwd=args.db_password)
        cursor = db.cursor()
    except MySQLdb.Error as (errno, msg):
        print 'MySQL Error [%d]: %s' % (errno, msg)
        sys.exit(os.EX_DATAERR)

    if args.stat:
        show_status(cursor)
    if args.date:
        delete_unnecessary_records_by_date(args.table, args.date, db, cursor)
    if args.number:
        delete_unncessary_records_by_number(args.table, args.number, db, cursor)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Hatohol House Keeper')
    parser.add_argument('-d', '--date', type=str,
                        help='A term of removed records. Format: YY-mm-dd')
    parser.add_argument('-n', '--number', type=int,
                        help='A number of removed records.')
    parser.add_argument('--db_host', default='localhost', type=str,
                        help='A database server.')
    parser.add_argument('--db_name', type=str, required=True,
                        help='A database name to be cleaned.')
    parser.add_argument('--db_user', type=str, required=True,
                        help='A user for the database server.')
    parser.add_argument('--db_password', type=str, required=True,
                        help='A pasword for the database server. '
                        'If the password is not set, give \'\' '
                        'for this argument.')
    parser.add_argument('--stat', action='store_true', default=False,
                        help='Show number of keeping tables record.')
    parser.add_argument('--table', nargs='?', type=str,
                        help='Only the specified table is initialized.')
    args = parser.parse_args()

    finish_if_require_option_is_fault(args)
    start(args)
